name: 'GitHub-Jira Integration'
description: 'Integrates GitHub PRs with Jira issues - automatically adds Jira details to PRs and updates Jira status on merge'
author: 'SmartX Advisory'

inputs:
  github-token:
    description: 'GitHub token for API access'
    required: true
    default: ${{ github.token }}
  jira-base-url:
    description: 'Base URL of your Jira instance (e.g., https://your-domain.atlassian.net)'
    required: true
  jira-user-email:
    description: 'Email address of the Jira API user'
    required: true
  jira-api-token:
    description: 'API token for Jira authentication'
    required: true
  pr-open-transition:
    description: 'Transition to use when PR is opened'
    required: false
    default: 'In Progress'
  pr-merge-transition:
    description: 'Transition to use when PR is merged'
    required: false
    default: 'Complete'
  jira-project-key:
    description: 'Optional: Limit to issues from a specific Jira project'
    required: false
    default: ''

runs:
  using: "composite"
  steps:
    - name: Extract Jira Issue Key
      id: extract-jira-key
      shell: bash
      run: |
        PR_TITLE="${{ github.event.pull_request.title }}"
        BRANCH_NAME="${{ github.head_ref || github.ref_name }}"
        
        # Try to extract from PR title first
        if [[ "$PR_TITLE" =~ ([A-Z]+-[0-9]+) ]]; then
          ISSUE_KEY=${BASH_REMATCH[1]}
        # Then try branch name
        elif [[ "$BRANCH_NAME" =~ ([A-Z]+-[0-9]+) ]]; then
          ISSUE_KEY=${BASH_REMATCH[1]}
        fi
        
        if [[ -n "$ISSUE_KEY" ]]; then
          echo "Found Jira issue key: $ISSUE_KEY"
          echo "JIRA_ISSUE=$ISSUE_KEY" >> $GITHUB_ENV
          echo "JIRA_ISSUE_FOUND=true" >> $GITHUB_ENV
        else
          echo "No Jira issue key found in PR title or branch name"
          echo "JIRA_ISSUE_FOUND=false" >> $GITHUB_ENV
        fi
    
    - name: Add Jira Info to PR Description
      if: env.JIRA_ISSUE_FOUND == 'true' && github.event.action != 'closed'
      uses: cakeinpanic/jira-description-action@v0.4.0
      with:
        github-token: ${{ inputs.github-token }}
        jira-token: ${{ inputs.jira-api-token }}
        jira-base-url: ${{ inputs.jira-base-url }}
        skip-branches: '^(main|master|dev|develop|release)$'
        custom-issue-number-regexp: '([A-Z]+-[0-9]+)'
    
    - name: Transition Jira Issue on PR Open
      if: env.JIRA_ISSUE_FOUND == 'true' && github.event.action == 'opened'
      shell: bash
      run: |
        JIRA_BASE_URL="${{ inputs.jira-base-url }}"
        JIRA_EMAIL="${{ inputs.jira-user-email }}"
        JIRA_TOKEN="${{ inputs.jira-api-token }}"
        PREFERRED_TRANSITION="${{ inputs.pr-open-transition }}"
        
        # Basic auth
        AUTH=$(echo -n "${JIRA_EMAIL}:${JIRA_TOKEN}" | base64)
        
        echo "Getting Jira issue details for ${JIRA_ISSUE}..."
        
        # Get issue details
        ISSUE_URL="${JIRA_BASE_URL}/rest/api/3/issue/${JIRA_ISSUE}"
        ISSUE_DATA=$(curl -s -H "Authorization: Basic ${AUTH}" -H "Content-Type: application/json" "${ISSUE_URL}")
        
        ISSUE_TYPE=$(echo "$ISSUE_DATA" | jq -r '.fields.issuetype.name')
        CURRENT_STATUS=$(echo "$ISSUE_DATA" | jq -r '.fields.status.name')
        
        echo "Issue Type: $ISSUE_TYPE"
        echo "Current Status: $CURRENT_STATUS"
        
        # If already "In Progress", no need to transition
        if [[ "$CURRENT_STATUS" == "In Progress" || "$CURRENT_STATUS" == "Development" ]]; then
          echo "Issue is already in '$CURRENT_STATUS' status. No transition needed."
          exit 0
        fi
        
        # Get available transitions
        TRANSITIONS_URL="${JIRA_BASE_URL}/rest/api/3/issue/${JIRA_ISSUE}/transitions"
        TRANSITIONS=$(curl -s -H "Authorization: Basic ${AUTH}" -H "Content-Type: application/json" "${TRANSITIONS_URL}")
        
        echo "Available transitions:"
        echo "$TRANSITIONS" | jq -r '.transitions[] | "- \(.name) (ID: \(.id))"'
        
        # Try to find the best transition
        # Priority order for transitions when PR is opened
        TRANSITION_CANDIDATES=("$PREFERRED_TRANSITION" "In Progress" "Development" "Start Work" "Start Development")
        
        TRANSITION_ID=""
        TRANSITION_NAME=""
        
        for candidate in "${TRANSITION_CANDIDATES[@]}"; do
          if [[ -z "$TRANSITION_ID" ]] && [[ -n "$candidate" ]]; then
            # Try exact match
            EXACT_MATCH=$(echo "$TRANSITIONS" | jq -r --arg name "$candidate" '.transitions[] | select(.name==$name) | .id')
            
            if [[ -n "$EXACT_MATCH" ]]; then
              TRANSITION_ID="$EXACT_MATCH"
              TRANSITION_NAME="$candidate"
              echo "Found exact transition match: $TRANSITION_NAME (ID: $TRANSITION_ID)"
              break
            fi
            
            # Try partial match
            PARTIAL_MATCH=$(echo "$TRANSITIONS" | jq -r --arg name "$candidate" '.transitions[] | select(.name | ascii_downcase | contains($name | ascii_downcase)) | .id' | head -n1)
            
            if [[ -n "$PARTIAL_MATCH" ]]; then
              TRANSITION_ID="$PARTIAL_MATCH"
              TRANSITION_NAME=$(echo "$TRANSITIONS" | jq -r --arg id "$PARTIAL_MATCH" '.transitions[] | select(.id==$id) | .name')
              echo "Found partial transition match: $TRANSITION_NAME (ID: $TRANSITION_ID)"
              break
            fi
          fi
        done
        
        # If no match found yet, use the first available transition
        if [[ -z "$TRANSITION_ID" ]]; then
          TRANSITION_ID=$(echo "$TRANSITIONS" | jq -r '.transitions[0].id')
          TRANSITION_NAME=$(echo "$TRANSITIONS" | jq -r '.transitions[0].name')
          echo "No matching transition found, using first available: $TRANSITION_NAME (ID: $TRANSITION_ID)"
        fi
        
        if [[ -n "$TRANSITION_ID" ]]; then
          echo "Transitioning issue to: $TRANSITION_NAME"
          
          TRANSITION_RESULT=$(curl -s -X POST \
            -H "Authorization: Basic ${AUTH}" \
            -H "Content-Type: application/json" \
            --data "{\"transition\":{\"id\":\"${TRANSITION_ID}\"}}" \
            "${TRANSITIONS_URL}")
          
          # Verify the transition
          sleep 2 # Wait a moment for the transition to complete
          UPDATED_ISSUE=$(curl -s -H "Authorization: Basic ${AUTH}" -H "Content-Type: application/json" "${ISSUE_URL}")
          NEW_STATUS=$(echo "$UPDATED_ISSUE" | jq -r '.fields.status.name')
          
          if [[ "$NEW_STATUS" != "$CURRENT_STATUS" ]]; then
            echo "✅ Jira issue ${JIRA_ISSUE} successfully transitioned from '$CURRENT_STATUS' to '$NEW_STATUS'"
          else
            echo "⚠️ Transition may have failed. Status is still '$CURRENT_STATUS'"
          fi
        else
          echo "❌ Could not find suitable transition for PR opening"
        fi
    
    - name: Transition Jira Issue on PR Merge
      if: env.JIRA_ISSUE_FOUND == 'true' && github.event.pull_request.merged == true
      shell: bash
      run: |
        JIRA_BASE_URL="${{ inputs.jira-base-url }}"
        JIRA_EMAIL="${{ inputs.jira-user-email }}"
        JIRA_TOKEN="${{ inputs.jira-api-token }}"
        PREFERRED_TRANSITION="${{ inputs.pr-merge-transition }}"
        
        # Basic auth
        AUTH=$(echo -n "${JIRA_EMAIL}:${JIRA_TOKEN}" | base64)
        
        echo "Getting Jira issue details for ${JIRA_ISSUE}..."
        
        # Get issue details
        ISSUE_URL="${JIRA_BASE_URL}/rest/api/3/issue/${JIRA_ISSUE}"
        ISSUE_DATA=$(curl -s -H "Authorization: Basic ${AUTH}" -H "Content-Type: application/json" "${ISSUE_URL}")
        
        ISSUE_TYPE=$(echo "$ISSUE_DATA" | jq -r '.fields.issuetype.name')
        CURRENT_STATUS=$(echo "$ISSUE_DATA" | jq -r '.fields.status.name')
        
        echo "Issue Type: $ISSUE_TYPE"
        echo "Current Status: $CURRENT_STATUS"
        
        # Get all project statuses and current workflow
        PROJECT_KEY=$(echo ${JIRA_ISSUE} | cut -d'-' -f1)
        
        # Get available transitions
        TRANSITIONS_URL="${JIRA_BASE_URL}/rest/api/3/issue/${JIRA_ISSUE}/transitions"
        TRANSITIONS=$(curl -s -H "Authorization: Basic ${AUTH}" -H "Content-Type: application/json" "${TRANSITIONS_URL}")
        
        echo "Available transitions:"
        echo "$TRANSITIONS" | jq -r '.transitions[] | "- \(.name) (ID: \(.id))"'
        
        # Function to determine the "weight" of a status - higher is further along in workflow
        function get_status_weight {
          local status=$1
          local lower_status=$(echo "$status" | tr '[:upper:]' '[:lower:]')
          
          # Map common status names to weights based on typical workflow order
          case $lower_status in
            *backlog*)
              echo 10 ;;
            *todo*)
              echo 20 ;;
            *planning*)
              echo 30 ;;
            *start*)
              echo 40 ;;
            *progress*|*development*)
              echo 50 ;;
            *review*|*pr*)
              echo 60 ;;
            *testing*|*test*|*qa*)
              echo 70 ;;
            *verification*|*verify*)
              echo 80 ;;
            *ready*release*)
              echo 90 ;;
            *release*|*deploy*|*released*)
              echo 100 ;;
            *done*|*complete*|*finish*)
              echo 110 ;;
            *close*|*resolve*)
              echo 120 ;;
            *cancel*|*abandon*)
              echo -10 ;;
            *)
              echo 0 ;;
          esac
        }
        
        # Track current status weight
        CURRENT_WEIGHT=$(get_status_weight "$CURRENT_STATUS")
        
        echo "Current status weight: $CURRENT_WEIGHT"
        
        # Try the transitions in priority order
        TRANSITION_CANDIDATES=("$PREFERRED_TRANSITION" "Complete" "Done" "Resolve" "Closed" "In Review" "Ready for QA" "QA" "Testing")
        
        TRANSITION_ID=""
        TRANSITION_NAME=""
        BEST_SCORE=-1000
        
        # Parse transitions into a usable format for scoring
        TRANSITIONS_DATA=$(echo "$TRANSITIONS" | jq -r '.transitions[] | .id + "|" + .name + "|" + (.to.name // "Unknown")')
        
        while IFS= read -r line; do
          if [[ -n "$line" ]]; then
            TRANSITION_ID=$(echo "$line" | cut -d'|' -f1)
            TRANSITION_NAME=$(echo "$line" | cut -d'|' -f2)
            TO_STATUS=$(echo "$line" | cut -d'|' -f3)
            
            # Skip transitions that keep us in the same status
            if [[ "$TO_STATUS" == "$CURRENT_STATUS" ]]; then
              continue
            fi
            
            # Calculate score based on several factors
            SCORE=0
            TO_WEIGHT=$(get_status_weight "$TO_STATUS")
            
            # Favor forward movement in the workflow
            if [[ $TO_WEIGHT -gt $CURRENT_WEIGHT ]]; then
              # Prefer significant forward movement but not too big jumps
              WEIGHT_DIFF=$((TO_WEIGHT - CURRENT_WEIGHT))
              if [[ $WEIGHT_DIFF -le 30 ]]; then
                SCORE=$((SCORE + 50))
                
                # Extra points for just the right amount of movement
                if [[ $WEIGHT_DIFF -ge 10 && $WEIGHT_DIFF -le 20 ]]; then
                  SCORE=$((SCORE + 25))
                fi
              else
                # Penalize big jumps slightly
                SCORE=$((SCORE + 25))
              fi
            else
              # Penalize backward movement
              SCORE=$((SCORE - 50))
            fi
            
            # Check for preferred transition
            for candidate in "${TRANSITION_CANDIDATES[@]}"; do
              if [[ -n "$candidate" ]]; then
                if [[ "$TRANSITION_NAME" == "$candidate" ]]; then
                  # Exact match
                  SCORE=$((SCORE + 100))
                  break
                elif [[ "$TRANSITION_NAME" =~ $candidate ]]; then
                  # Partial match
                  SCORE=$((SCORE + 50))
                  break
                elif [[ "$TO_STATUS" == "$candidate" ]]; then
                  # Destination status matches
                  SCORE=$((SCORE + 75))
                  break
                elif [[ "$TO_STATUS" =~ $candidate ]]; then
                  # Partial destination match
                  SCORE=$((SCORE + 30))
                  break
                fi
              fi
            done
            
            echo "Transition: $TRANSITION_NAME -> $TO_STATUS (Score: $SCORE)"
            
            if [[ $SCORE -gt $BEST_SCORE ]]; then
              BEST_SCORE=$SCORE
              BEST_TRANSITION_ID=$TRANSITION_ID
              BEST_TRANSITION_NAME=$TRANSITION_NAME
              BEST_TO_STATUS=$TO_STATUS
            fi
          fi
        done <<< "$TRANSITIONS_DATA"
        
        if [[ -n "$BEST_TRANSITION_ID" ]]; then
          echo "Best transition: $BEST_TRANSITION_NAME (ID: $BEST_TRANSITION_ID) -> $BEST_TO_STATUS (Score: $BEST_SCORE)"
          
          # Check if we need to handle resolution when transitioning
          NEEDS_RESOLUTION=$(curl -s -X POST \
            -H "Authorization: Basic ${AUTH}" \
            -H "Content-Type: application/json" \
            --data "{\"transition\":{\"id\":\"${BEST_TRANSITION_ID}\"}}" \
            "${TRANSITIONS_URL}" | jq -r '.errorMessages[0] // ""')
          
          # If it mentions resolution is required
          if [[ "$NEEDS_RESOLUTION" == *"resolution"* ]]; then
            echo "Resolution required for this transition"
            curl -s -X POST \
              -H "Authorization: Basic ${AUTH}" \
              -H "Content-Type: application/json" \
              --data "{\"transition\":{\"id\":\"${BEST_TRANSITION_ID}\"},\"fields\":{\"resolution\":{\"name\":\"Done\"}}}" \
              "${TRANSITIONS_URL}"
          else
            echo "No resolution required, performing simple transition"
            # Perform simple transition
            curl -s -X POST \
              -H "Authorization: Basic ${AUTH}" \
              -H "Content-Type: application/json" \
              --data "{\"transition\":{\"id\":\"${BEST_TRANSITION_ID}\"}}" \
              "${TRANSITIONS_URL}"
          fi
          
          # Verify the transition
          sleep 2 # Wait a moment for the transition to complete
          UPDATED_ISSUE=$(curl -s -H "Authorization: Basic ${AUTH}" -H "Content-Type: application/json" "${ISSUE_URL}")
          NEW_STATUS=$(echo "$UPDATED_ISSUE" | jq -r '.fields.status.name')
          
          if [[ "$NEW_STATUS" != "$CURRENT_STATUS" ]]; then
            echo "✅ Jira issue ${JIRA_ISSUE} successfully transitioned from '$CURRENT_STATUS' to '$NEW_STATUS'"
          else
            echo "⚠️ Transition may have failed. Status is still '$CURRENT_STATUS'"
          fi
        else
          echo "❌ No valid transitions are available for this issue"
        fi
    
    - name: Add PR Link to Jira Issue
      if: env.JIRA_ISSUE_FOUND == 'true' && github.event.pull_request.merged == true
      shell: bash
      run: |
        JIRA_BASE_URL="${{ inputs.jira-base-url }}"
        JIRA_EMAIL="${{ inputs.jira-user-email }}"
        JIRA_TOKEN="${{ inputs.jira-api-token }}"
        PR_URL="${{ github.event.pull_request.html_url }}"
        PR_TITLE="${{ github.event.pull_request.title }}"
        
        # Basic auth
        AUTH=$(echo -n "${JIRA_EMAIL}:${JIRA_TOKEN}" | base64)
        
        echo "Adding PR link to Jira issue ${JIRA_ISSUE}..."
        
        # Add comment with PR link
        COMMENT_URL="${JIRA_BASE_URL}/rest/api/3/issue/${JIRA_ISSUE}/comment"
        
        curl -s -X POST \
          -H "Authorization: Basic ${AUTH}" \
          -H "Content-Type: application/json" \
          --data "{
            \"body\": {
              \"type\": \"doc\",
              \"version\": 1,
              \"content\": [
                {
                  \"type\": \"paragraph\",
                  \"content\": [
                    {
                      \"text\": \"PR merged: $PR_TITLE\",
                      \"type\": \"text\"
                    }
                  ]
                },
                {
                  \"type\": \"paragraph\",
                  \"content\": [
                    {
                      \"text\": \"$PR_URL\",
                      \"type\": \"text\",
                      \"marks\": [
                        {
                          \"type\": \"link\",
                          \"attrs\": {
                            \"href\": \"$PR_URL\"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          }" \
          "${COMMENT_URL}"
        
        echo "Comment added to Jira issue with PR link"
